# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

substitutions:
  _GCS_BUCKET: gs://${PROJECT_ID}-rlhf-artifacts
  _PIPELINE_REGISTRY: ${PROJECT_ID}-rlhf-pipelines
  _REGION: us-central1
  _MODEL_DISPLAY_NAME: rlhf-tuned-text-bison
  _TMPDIR: deploy/tmp

steps:
  - id: install requirements
    name: python:3.11
    entrypoint: bash
    args:
    - -c
    - |
      python -m pip install -U -r requirements.txt --user

  - id: run unit tests
    name: python:3.11
    entrypoint: bash
    args:
    - -c
    - |
      python -m pytest

  - id: copy data to bucket
    name: gcr.io/cloud-builders/gsutil
    entrypoint: bash
    args:
    - -c
    - |
      gsutil -m cp -r data ${_GCS_BUCKET}

  - id: update tuner.metadata
    name: ubuntu
    entrypoint: bash
    args:
    - -c
    - |
      sed -i -e "s/<your-project-id>/${PROJECT_ID}/g" pkg/tuner/metadata.py 

  - id: compile tuning pipeline
    name: python:3.11
    entrypoint: python
    args:
    - -c
    - |
      from kfp import compiler
      from pkg.tuner import rlhf, metadata

      compiler.Compiler().compile(
        pipeline_func=rlhf.tune, package_path=metadata.COMPILED_PIPELINE_PATH
      )

  - id: upload tuning pipeline
    name: python:3.11
    entrypoint: python
    args:
    - -c
    - |
      from pkg.tuner import registry, metadata

      registry.upload(
        project_id="${PROJECT_ID}",
        region="${_REGION}",
        pipeline_registry="${_PIPELINE_REGISTRY}",
        compiled_pipeline_path=metadata.COMPILED_PIPELINE_PATH
      )

  - id: tune foundation model
    name: python:3.11
    entrypoint: python
    args:
    - -c
    - |
      import google.cloud.aiplatform as aiplatform
      from pkg.tuner import steps, registry, metadata, parameters

      REWARD_MODEL_TRAIN_STEPS = steps.get_reward_model_train_steps()
      REINFORCEMENT_LEARNING_TRAIN_STEPS = steps.get_reinforcement_learning_train_steps()
      PIPELINE_TEMPLATE_URI = "https://${_REGION}-kfp.pkg.dev/${PROJECT_ID}/${_PIPELINE_REGISTRY}/rlhf-tune-pipeline/latest"

      job = aiplatform.PipelineJob(
          display_name=metadata.MODEL_DISPLAY_NAME,
          pipeline_root=metadata.PIPELINE_ROOT,
          template_path=PIPELINE_TEMPLATE_URI,
          parameter_values=parameters.get_values(
              preference_dataset=metadata.PREFERENCE_DATASET,
              prompt_dataset=metadata.PROMPT_DATASET,
              reward_model_train_steps=REWARD_MODEL_TRAIN_STEPS,
              reinforcement_learning_train_steps=REINFORCEMENT_LEARNING_TRAIN_STEPS
          )
      )

      job.run()

  - id: populate skaffold configuration with values
    name: google/cloud-sdk:latest
    entrypoint: bash
    args:
    - -c
    - |
      mkdir -p "${_TMPDIR}"

      deploy/replace_variables.sh \
      -p "${PROJECT_ID}" \
      -r "${_REGION}" \
      -t "${_TMPDIR}"

  - id: create a release and rollout to dev
    name: google/cloud-sdk:latest
    entrypoint: bash
    args:
    - -c
    - |
      MODEL_ID=`gcloud ai models list \
      --project=${PROJECT_ID} \
      --region=${_REGION} \
      --filter="DISPLAY_NAME: ${_MODEL_DISPLAY_NAME}" \
      --sort-by=~creationTimestamp \
      --limit=1 \
      --format="flattened(name)" \
      | awk '{print $2}' | tr -d '\n' | sed 's:.*/::'`

      echo "Model ID: $${MODEL_ID}"
      
      DELIVERY_PIPELINE_NAME="vertex-ai-cloud-deploy-pipeline"
      DEPLOY_PARAMS="customTarget/vertexAIModel=projects/${PROJECT_ID}/locations/${_REGION}/models/$${MODEL_ID}"
      RELEASE_NAME="release-$(date +%s)"

      echo "Creating release $${RELEASE_NAME}"
      gcloud deploy releases create "$${RELEASE_NAME}" \
      --delivery-pipeline="$${DELIVERY_PIPELINE_NAME}" \
      --project="${PROJECT_ID}" \
      --region="${_REGION}" \
      --source="${_TMPDIR}/configuration" \
      --deploy-parameters="$$DEPLOY_PARAMS"
      
      RENDER_STATE=`gcloud deploy releases describe "$${RELEASE_NAME}" \
      --delivery-pipeline="$${DELIVERY_PIPELINE_NAME}" \
      --project="${PROJECT_ID}" \
      --region="${_REGION}" \
      --format "yaml(renderState)" \
      | awk '{print $2}'`

      while [ "$$RENDER_STATE" == "IN_PROGRESS" ]
      do
        echo "Waiting for release to complete..."
        sleep 5
        RENDER_STATE=`gcloud deploy releases describe "$${RELEASE_NAME}" \
        --delivery-pipeline="$${DELIVERY_PIPELINE_NAME}" \
        --project="${PROJECT_ID}" \
        --region="${_REGION}" \
        --format "yaml(renderState)" \
        | awk '{print $2}'`
      done
      echo ".....done."

      echo "Describe completed release"
      gcloud deploy releases describe "$${RELEASE_NAME}" \
      --delivery-pipeline="$${DELIVERY_PIPELINE_NAME}" \
      --project="${PROJECT_ID}" \
      --region="${_REGION}"
options:
    dynamicSubstitutions: true
timeout: 86400s
